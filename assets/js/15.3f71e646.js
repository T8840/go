(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{423:function(t,o,l){"use strict";l.r(o);var s=l(2),n=Object(s.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h4",{attrs:{id:"go语言的设计哲学-简单、显式、组合、并发和面向工程。"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#go语言的设计哲学-简单、显式、组合、并发和面向工程。"}},[t._v("#")]),t._v(" Go语言的设计哲学：简单、显式、组合、并发和面向工程。")]),t._v(" "),o("ul",[o("li",[t._v("简单是指 Go 语言特性始终保持在少且足够的水平，不走语言特性融合的道路，但又不乏生产力。简单是 Go 生产力的源泉，也是 Go 对开发者的最大吸引力；")]),t._v(" "),o("li",[t._v("显式是指任何代码行为都需开发者明确知晓，不存在因“暗箱操作”而导致可维护性降低和不安全的结果；")]),t._v(" "),o("li",[t._v("组合是构建 Go 程序骨架的主要方式，它可以大幅降低程序元素间的耦合，提高程序的可扩展性和灵活性；")]),t._v(" "),o("li",[t._v("并发是 Go 敏锐地把握了 CPU 向多核方向发展这一趋势的结果，可以让开发人员在多核时代更容易写出充分利用系统资源、支持性能随 CPU 核数增加而自然提升的应用程序；")]),t._v(" "),o("li",[t._v("面向工程是 Go 语言在语言设计上的一个重大创新，它将语言要解决的问题域扩展到那些原本并不是由编程语言去解决的领域，从而覆盖了更多开发者在开发过程遇到的“痛点”，为开发者提供了更好的使用体验。")])]),t._v(" "),o("p",[t._v("这些设计哲学直接影响了 Go 语言自身的设计。理解这些设计哲学，也能帮助我们理解 Go 语言语法、标准库以及工具链的演化决策过程。")])])}),[],!1,null,null,null);o.default=n.exports}}]);
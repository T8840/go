(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{429:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"go方法定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go方法定义"}},[t._v("#")]),t._v(" Go方法定义")]),t._v(" "),a("p",[t._v("Go 引入方法这一元素，并不是要支持面向对象编程范式，而是 Go 践行组合设计哲学的一种实现层面的需要。\n一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。语法格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable_name variable_data_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("return_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 函数体*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法调用"}},[t._v("#")]),t._v(" 方法调用")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%p, %v, %d \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通方法调用")]),t._v("\n\tt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法值调用")]),t._v("\n\tf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Set\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法表达式调用")]),t._v("\n\tm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tf1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与普通方法等价 m.Get()")]),t._v("\n\tf2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与普通方法等价 m.Set(4)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"一般方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般方法调用"}},[t._v("#")]),t._v(" 一般方法调用")]),t._v(" "),a("h3",{attrs:{id:"方法值调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法值调用"}},[t._v("#")]),t._v(" 方法值调用")]),t._v(" "),a("p",[t._v("变量x的静态类型是T，M是类型T的一个方法，x.M被称为方法值，x.M是一个函数类型变量，可以赋值给其他变量，并像普通的函数名一样使用。")]),t._v(" "),a("p",[t._v("方法值其实是一个闭包的函数变量，其底层实现原理和待遇闭包的匿名函数类似，接收值被隐式地绑定到方法值的闭包环境中，后续调用不需要再显式地传递接收者。")]),t._v(" "),a("h3",{attrs:{id:"方法表达式调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法表达式调用"}},[t._v("#")]),t._v(" 方法表达式调用")]),t._v(" "),a("p",[t._v("方法表达式相当于提供一种语法将类型方法调用显式地转换未函数调用，接收者必须显示地传递进去。")]),t._v(" "),a("h2",{attrs:{id:"方法集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法集"}},[t._v("#")]),t._v(" 方法集")]),t._v(" "),a("p",[t._v("为了简化描述，将接收者receiver为值类型T的方法的集合记录为S，将接收者receiver为指针类型"),a("em",[t._v("T的方法的集合记录为")]),t._v("S，\n类型的方法集总结如下：")]),t._v(" "),a("ul",[a("li",[t._v("T类型的方法集是S")]),t._v(" "),a("li",[a("em",[t._v("T类型的方法集是S和")]),t._v("S")])]),t._v(" "),a("h3",{attrs:{id:"值调用的方法集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值调用的方法集"}},[t._v("#")]),t._v(" 值调用的方法集")]),t._v(" "),a("h3",{attrs:{id:"表达式调用的方法集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式调用的方法集"}},[t._v("#")]),t._v(" 表达式调用的方法集")]),t._v(" "),a("h2",{attrs:{id:"嵌套组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套组合"}},[t._v("#")]),t._v(" 嵌套组合")]),t._v(" "),a("h3",{attrs:{id:"内部类型的方法可以被提升到外部类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类型的方法可以被提升到外部类型"}},[t._v("#")]),t._v(" 内部类型的方法可以被提升到外部类型")]),t._v(" "),a("h3",{attrs:{id:"内部类型实现的接口会自动提升到外部类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类型实现的接口会自动提升到外部类型"}},[t._v("#")]),t._v(" 内部类型实现的接口会自动提升到外部类型")]),t._v(" "),a("h3",{attrs:{id:"外部类型并不需要使用内部类型的实现-而想另外实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部类型并不需要使用内部类型的实现-而想另外实现"}},[t._v("#")]),t._v(" 外部类型并不需要使用内部类型的实现，而想另外实现")]),t._v(" "),a("p",[t._v("外部类型定义与内部类型同名方法，这样内部类型实现的接口不会提升到外部类型")]),t._v(" "),a("h3",{attrs:{id:"组合的方法集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合的方法集"}},[t._v("#")]),t._v(" 组合的方法集")]),t._v(" "),a("p",[t._v("组合结构的方法集有如下规则：")]),t._v(" "),a("ul",[a("li",[t._v("1、若类型S包含匿名字段T，则S的方法集包含T的方法集")]),t._v(" "),a("li",[t._v("2、若类型S包含匿名字段"),a("em",[t._v("T，则S的方法集包含T和")]),t._v("T方法集")]),t._v(" "),a("li",[t._v("3、不管类型S中嵌入的匿名字段是T还是*T，"),a("em",[t._v("S方法集总是包含T和")]),t._v("T方法集合")])])])}),[],!1,null,null,null);a.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{439:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。")]),t._v(" "),a("h3",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),a("ol",[a("li",[t._v("第一种，指定变量类型，如果没有初始化，则变量默认为零值。通用的变量声明格式：\n式：")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),a("p",[t._v("这个变量声明分为四个部分：")]),t._v(" "),a("ul",[a("li",[t._v("var是修饰变量声明的关键字；")]),t._v(" "),a("li",[t._v("a为变量名；")]),t._v(" "),a("li",[t._v("int为该变量的类型；")]),t._v(" "),a("li",[t._v("10是变量的初值。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("第二种，根据值自行判定变量类型。")])]),t._v(" "),a("li",[a("p",[t._v("第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误，格式：")])])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("v_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" value\n")])])]),a("h3",{attrs:{id:"多变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多变量声明"}},[t._v("#")]),t._v(" 多变量声明")]),t._v(" "),a("p",[t._v("多变量声明是针对类型相同多个变量, 非全局变量")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\nvname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和 python 很像,不需要显示声明类型，自动推断")]),t._v("\nvname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种因式分解关键字的写法一般用于声明全局变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    vname1 v_type1\n    vname2 v_type2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"变量注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量注意事项"}},[t._v("#")]),t._v(" 变量注意事项")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("变量所绑定的内存区域是要有一个明\n确的边界的。"),a("br"),t._v("\n也就是说，通过这样一个变量，我们究竟可以操作4个字节内存还是8个字节内\n存，又或是256个字节内存，编程语言的编译器或解释器需要明确地知道。")])]),t._v(" "),a("li",[a("p",[t._v("声明聚类与就近原则"),a("br"),t._v("\n就近原则，也就是说\n我们尽可能在靠近第一次使用变量的位置声明这个变量。就近原则实际上也是对变量的作用\n域最小化的一种实现手段，如标准库http包中的代码就是这样：")])])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $GOROOT/src/net/http/request.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ErrNoCookie "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http: named cookie not present"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readCookies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Header"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ErrNoCookie\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"变量分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量分类"}},[t._v("#")]),t._v(" 变量分类")]),t._v(" "),a("p",[t._v("通常来说，Go语言的变量可以分为两类：")]),t._v(" "),a("ul",[a("li",[t._v("一类称为包级变量(package varible)，也就是在\n包级别可见的变量。如果是导出变量（大写字母开头），那么这个包级变量也可以被视为全\n局变量；")]),t._v(" "),a("li",[t._v("另一类则是局部变量(local varible)，也就是Go函数或方法体内声明的变量，仅在\n函数或方法体内可见。")])]),t._v(" "),a("h3",{attrs:{id:"包级变量的声明形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包级变量的声明形式"}},[t._v("#")]),t._v(" 包级变量的声明形式")]),t._v(" "),a("p",[t._v("包级变量只能使用带有var关键字的变量声明形式，不能使用短变量声\n明形式，但在形式细节上可以有一定灵活度。")]),t._v(" "),a("ul",[a("li",[t._v("第一类：声明并同时显式初始化\nvar varName = initExpression"),a("br"),t._v("\n尽量保证声明一致性，，这\n样能统一接受默认类型和显式指定类型这两种声明形式。")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("float32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("ul",[a("li",[t._v("第二类：声明但延迟初始化\n如：var a int32， 虽然没有显式初始化，Go语言也会让这些变量拥有初始的“零值”。如果是自定义的类型，尽量保证它的零值是可用的。\n还有一个注意事项，就是声明聚类与就近原则。")])]),t._v(" "),a("h3",{attrs:{id:"局部变量的声明形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部变量的声明形式"}},[t._v("#")]),t._v(" 局部变量的声明形式")]),t._v(" "),a("p",[t._v("和包级变量相比，局部变量又\n多了一种短变量声明形式，这是局部变量特有的一种变量声明形式，也是局部变量采用最多\n的一种声明形式。")]),t._v(" "),a("ul",[a("li",[t._v("第一类：对于延迟初始化的局部变量声明，我们采用通用的变量声明形式")]),t._v(" "),a("li",[t._v('第二类：对于声明且显式初始化的局部变量，建议使用短变量声明形式\n对于不接受默认类型的变量，我们依然可以使用短变量声明形式，只是在":="右侧要做一个显\n式转型，以保持声明的一致性：')])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("float32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, gopher!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("并且，尽量在分支控制时使用短变量声明形式；")]),t._v(" "),a("p",[t._v("但是如果你在声明局部变量时遇到了适合聚类的应用场\n景，你也应该毫不犹豫地使用var声明块来声明多于一个的局部变量，如标准库net包中resolveAddrList方法：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $GOROOT/src/net/dial.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Resolver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveAddrList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n addr "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hint Addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addrList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n tcp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TCPAddr\n udp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("UDPAddr\n ip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IPAddr\n wildcard "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("p",[t._v("常量是一个简单值的标识符，在程序运行时，不会被修改的量。")]),t._v(" "),a("p",[t._v("常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。")]),t._v(" "),a("p",[t._v("常量的定义格式：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" identifier "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//显式类型定义： ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//隐式类型定义： ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多个相同类型的声明可以简写为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c_name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c_name2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2\n")])])]),a("h2",{attrs:{id:"零值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零值"}},[t._v("#")]),t._v(" 零值")]),t._v(" "),a("p",[t._v("Go规范定义的内置原生类型的默认\n值（即零值）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("0.00000")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v('""')])]),t._v(" "),a("tr",[a("td",[t._v("结构体")]),t._v(" "),a("td",[t._v("根据结构体内部的基础数据类型进行初始化赋值")])]),t._v(" "),a("tr",[a("td",[t._v("数组（切片）")]),t._v(" "),a("td",[t._v("空数组")])]),t._v(" "),a("tr",[a("td",[t._v("指针")]),t._v(" "),a("td",[t._v("nil")])])])]),t._v(" "),a("h2",{attrs:{id:"代码块与作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码块与作用域"}},[t._v("#")]),t._v(" 代码块与作用域")]),t._v(" "),a("p",[t._v("变量遮蔽是Go开发人员在日常开发工作中最容易犯的编码错误之一。\n要想彻底保证不出现变量遮蔽问题，我们需要深入了解代码块与作用域这两个概\n念以及其背后的规则。")]),t._v(" "),a("h3",{attrs:{id:"避免变量遮蔽的原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免变量遮蔽的原则"}},[t._v("#")]),t._v(" 避免变量遮蔽的原则")]),t._v(" "),a("p",[t._v("一个变量的作用域起始于其声明所在的代码块，并且可以一直扩展\n到嵌入到该代码块中的所有内层代码块，而正是这样的作用域规则，成为了滋生“变量遮蔽\n问题”的土壤")]),t._v(" "),a("ul",[a("li",[t._v("显式代码块"),a("br"),t._v("\n由两个肉眼可见的且配对的大括号包裹起来\n的，我们称这样的代码块为显式代码块（Explicit Blocks）")]),t._v(" "),a("li",[t._v("隐式代码块"),a("br"),t._v("\n顾名思义，隐式代码块（Implicit Block）没有显式代码块那样的肉眼可见的配对大括号包裹，我们无法通过大括号来识别隐式代码块。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);